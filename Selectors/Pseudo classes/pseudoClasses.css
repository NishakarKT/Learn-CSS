button{
    display: block;
    margin: 100px auto;
    font-size: 3rem;
    transition-duration: 0.2s;
}

#inputContainer{
    border: 2px solid black;
    padding: 10px;
}

/* first child */
li:first-child{ /* targets all li which is the first child */
    color: blue;
    font-weight: bold;
}

/* last child */
li:last-child{ /* targets all li which is the last child */
    color: green;
    font-weight: bold;
}

/* nth child */
li:nth-child(odd){
    font-size: 2rem;
}
li:nth-child(even){
    font-size: 3rem;
}
li:nth-child(2){ /* starts from n = 0 */
    background-color: brown;
}
li:nth-child(3n + 1){ /* starts from n = 0 */
    background-color: yellow;
}

/* nth last child */
li:nth-last-child(2n+1){ /* targets all li from "last" acc. to 2n + 1, but li must have a parent */
    color: green;
    font-weight: bold;
}

/* nth of type */
li:nth-of-type(2){ /* targets all 2nd li, including both with/without parents */
    background-color: rgb(0,0,0,0.2);
}
/* nth last of type */
li:nth-last-of-type(2){ /* targets all 2nd li, including both with/without parents */
    background-color: rgb(0,0,0,0.2);
}

/* only child */
li:only-child{ /* when li is the only child of its parent */
    font-style: italic;
}

/* only of type */
li:only-of-type{ /* when li is the only one */
    border: 2px solid black;
}

/* only of type */
li:first-of-type{ /* when li is the first one of its type */
    border: 2px solid black;
}

/* only of type */
li:last-of-type{ /* when li is the last one of its type */
    border: 2px solid black;
}

/* empty */
div:empty{ /* completely empty, not even a single white space */
    height: 20px;
}

/* not */
ol:not(ul){ /* targets all except ul */
    border: 2px solid black;
}

/* lang */
ol:lang(en){ /* targets elements in language english */
    border: 2px solid black;
}

/* hover */
button:hover{
    transform: scale(1.05);
    cursor: pointer;
}

/* active */
button:active{
    background-color: yellow;
}

/* a:link{ (may or may not be used)
    color: yellow;
} */
/* a:visited{
    background-color: gray;
} */

p:target{ /* when href to p in an anchor tag */
    background-color: yellow;
}

/* input/form related */
/* focus */
input:focus{
    background-color: lightcyan;
}

/* checked ==> works for radio buttons and check boxes*/
input[type="checkbox"]:checked{
    /* for checkboxes/radiobuttons, border doesn't work, so we use box shadow instead */
}
input[type="checkbox"]:checked + label{
    /* targetting the label with the checkbox */
}

/* disabled ==> css for uneditable inputs */
input:disabled{
    background-color: yellow;
}
/* enabled ==> css for editable inputs */
input:enabled{
    background-color: white;
}
/* required ==> css for required inputs */
input:required{
    border: 3px solid black;
}
/* optional ==> css for optional inputs */
input:optional{
    border: 3px solid grey;
}

/* read only ==> no editing */
input:read-only{
    background-color: magenta;
}
/* read-write ==> default html*/
input:read-write{
    background-color: white;
}

/* valid */
input[type="email"]:valid{
    background-color: yellow;
}
/* invalid */
input[type="email"]:invalid{
    background-color: red;
}

/* only for default checked/option type inputs */
input[type="checkbox"]:default{
    box-shadow: 0 0 0 5px black;
}

/* :is instead of "," */
:is(#para2, #para3){
    background-color: magenta;
}
:is(#para2, #para3) span{
    color: white;
    font-weight: bold;
}
:is(h1,h2){
    color: yellow;
}

/* focus within */
#inputContainer:focus-within{ /* when a child is focused */
    background-color: yellow;
}

/* placeholder shown */ /*doesn't work on some types like date, time etc. */
#inputContainer input:placeholder-shown{ /* whild placeholder is visible */
    background-color: yellow;
}

/* only for input numbers */
input:in-range{
    background-color: yellow;
}
input:out-of-range{
    background-color: red;
}
